using Pokemon3D.Common;
using Pokemon3D.DataModel.Json;
using Pokemon3D.DataModel.Json.GameMode.Pokemon;
using Pokemon3D.DataModel.Json.Savegame.Pokemon;
using System;
using System.Collections.Generic;
using System.Linq;
using System.IO;
using Pokemon3D.Common.Diagnostics;
using Pokemon3D.DataModel.Json.Pokemon;

namespace Pokemon3D.GameModes.Pokemon
{
    /// <summary>
    /// Used to create <see cref="Pokemon"/> instances.
    /// </summary>
    class PokemonFactory
    {
        private const int PERSONALITY_VALUE_LENGTH = 10;
        private const string POKEMON_FILE_EXTENSION = ".json";

        private GameMode _gameMode;
        private int[] _charCodes;
        private Random _randomizer;

        private Dictionary<string, PokemonModel> _definitionModelbuffer;
        
        public PokemonFactory(GameMode gameMode)
        {
            _gameMode = gameMode;
            _randomizer = new Random();
            _definitionModelbuffer = new Dictionary<string, PokemonModel>();
        }

        private PokemonModel GetDefinitionModel(string id)
        {
            if (!_definitionModelbuffer.ContainsKey(id))
            {
                PokemonModel definitionModel = null;

                string path = Path.Combine(_gameMode.PokemonDataPath, id + POKEMON_FILE_EXTENSION);

                if (File.Exists(path))
                {
                    try
                    {
                        definitionModel = JsonDataModel<PokemonModel>.FromFile(path);
                    }
                    catch (JsonDataLoadException ex)
                    {
                        GameLogger.Instance.Log(ex);
                    }
                }
                else
                {
                    GameLogger.Instance.Log(MessageType.Error, "Pokémon data file at \"" + path + "\" not found.");
                }

                _definitionModelbuffer.Add(id, definitionModel);
            }

            return _definitionModelbuffer[id];
        }

        /// <summary>
        /// Generates a personality value for a Pokémon from 10 random numbers and letters.
        /// </summary>
        private string GeneratePersonalityValue()
        {
            if (_charCodes == null)
            {
                // ASCII code table (https://en.wikipedia.org/wiki/ASCII#ASCII_printable_code_chart)
                // initialize char code array with letters and numbers:
                var charCodes = new List<int>();
                charCodes.AddRange(Enumerable.Range(48, 10)); // 0-9
                charCodes.AddRange(Enumerable.Range(65, 26)); // A-Z
                charCodes.AddRange(Enumerable.Range(97, 26)); // a-z

                _charCodes = charCodes.ToArray();
            }

            var personalityValue = string.Empty;

            while (personalityValue.Length < PERSONALITY_VALUE_LENGTH)
                personalityValue += ((char)_charCodes[_randomizer.Next(0, _charCodes.Length)]).ToString();

            return personalityValue;
        }

        /// <summary>
        /// Creates a new <see cref="Pokemon"/> instance based on its datamodel id.
        /// </summary>
        public Pokemon Create(string id, int level)
        {
            var dataModel = GetDefinitionModel(id);
            var saveModel = new PokemonSaveModel();

            PopulateSaveModel(dataModel, ref saveModel, level);

            var pokemon = new Pokemon(_gameMode, dataModel, saveModel);
            // preset full HP:
            pokemon.HP = PokemonStatCalculator.CalculateHP(pokemon);

            return pokemon;
        }

        /// <summary>
        /// Creates a new <see cref="Pokemon"/> instance from a save model.
        /// </summary>
        public Pokemon Create(PokemonSaveModel saveModel)
        {
            var dataModel = GetDefinitionModel(saveModel.Id);

            var pokemon = new Pokemon(_gameMode, dataModel, saveModel);
            return pokemon;
        }

        private void PopulateSaveModel(PokemonModel dataModel, ref PokemonSaveModel saveModel, int level)
        {
            // when generating a new Pokémon, the save model is empty, as it is a blank slate.
            // some values are generated by default or just set to their base values, so we do that here.

            saveModel.Id = dataModel.Id;

            // setting personality value:
            saveModel.PersonalityValue = GeneratePersonalityValue();

            // setting gender:
            if (dataModel.IsGenderless)
            {
                saveModel.Gender = PokemonGender.Genderless;
            }
            else
            {
                var r = _randomizer.NextDouble();
                if (r <= (dataModel.IsMale / 100))
                {
                    saveModel.Gender = PokemonGender.Male;
                }
                else
                {
                    saveModel.Gender = PokemonGender.Female;
                }
            }

            // presetting catch info with empty information:
            saveModel.CatchInfo = new PokemonCatchInfo()
            {
                BallItemId = "",
                Location = "",
                Method = "",
                TrainerName = "",
                OT = ""
            };

            // no egg, 0 experience:
            saveModel.EggSteps = 0;
            saveModel.Experience = 0;

            // set all effort values to 0:
            saveModel.EVs = new PokemonStatSetModel()
            {
                Atk = 0,
                Def = 0,
                SpAtk = 0,
                SpDef = 0,
                HP = 0,
                Speed = 0
            };
            // randomize IVs:
            saveModel.IVs = new PokemonStatSetModel()
            {
                Atk = _randomizer.Next(0, 32),
                Def = _randomizer.Next(0, 32),
                SpAtk = _randomizer.Next(0, 32),
                SpDef = _randomizer.Next(0, 32),
                HP = _randomizer.Next(0, 32),
                Speed = _randomizer.Next(0, 32)
            };

            // set to random nature:
            saveModel.NatureId = _gameMode.NatureManager.GetRandomNature().Id;

            // set to base friendship:
            saveModel.Friendship = dataModel.BaseFriendship;

            // chance of 1/4096 to be shiny:
            saveModel.IsShiny = (_randomizer.Next(0, 4096) == 0);

            saveModel.Nickname = "";

            saveModel.Status = PokemonStatus.None;
        }
    }
}
